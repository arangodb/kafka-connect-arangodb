version: 2.1

parameters:
  docker-img:
    type: 'string'
    default: ""

commands:
  setup_docker:
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
  timeout:
    parameters:
      duration:
        default: '5m'
        type: 'string'
    steps:
      - run:
          name: Cancel job after <<parameters.duration>>
          background: true
          command: |
            sleep <<parameters.duration>>
            echo "Cancelling job as <<parameters.duration>> has elapsed"
            curl --fail -X POST -H "Circle-Token: ${CIRCLE_TOKEN}" "https://circleci.com/api/v1.1/project/github/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BUILD_NUM}/cancel"
  report:
    steps:
      - run:
          name: Create reports
          command: mvn surefire-report:failsafe-report-only surefire-report:report-only
      - store_artifacts:
          path: target/site
  load_cache:
    steps:
      - run:
          name: Generate Cache Checksum
          command: find . -name 'pom.xml' | sort | xargs cat > /tmp/maven_cache_seed
      - restore_cache:
          key: maven-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/maven_cache_seed" }}
  store_cache:
    steps:
      - save_cache:
          key: maven-{{ .Environment.CIRCLE_JOB }}-{{ checksum "/tmp/maven_cache_seed" }}
          paths:
            - ~/.m2/repository
  config_gpg:
    steps:
      - run:
          name: Configure GPG
          command: echo $GPG_PRIVATE_KEY | base64 --decode | gpg --batch --no-tty --import --yes
  deploy:
    steps:
      - run:
          name: Deploy to Apache Maven Central
          command: mvn -s .circleci/maven-release-settings.xml -Dmaven.test.skip=true deploy
  release:
    steps:
      - run:
          name: Release to Apache Maven Central
          command: mvn -s .circleci/maven-release-settings.xml -Dmaven.test.skip=true nexus-staging:release

executors:
  j8:
    docker:
      - image: 'cimg/openjdk:8.0'
  j11:
    docker:
      - image: 'cimg/openjdk:11.0'
  j17:
    docker:
      - image: 'cimg/openjdk:17.0'
  j21:
    docker:
      - image: 'cimg/openjdk:21.0'

jobs:
  test-standalone:
    parameters:
      docker-img:
        type: 'string'
        default: <<pipeline.parameters.docker-img>>
    environment:
      DOCKER_IMAGE: <<parameters.docker-img>>
    executor: 'j21'
    steps:
      - timeout
      - checkout
      - setup_docker
      - load_cache
      - run:
          name: Create Kafka Environment
          command: ./docker/startup_retry.sh
      - run:
          name: Integration Tests
          command: mvn integration-test
      - run:
          name: zip and retrieve test data
          command: ./docker/stop_db.sh
          when: on_fail
      - store_artifacts:
          path: result.tar.gz
      - report
      - store_cache

  test-distributed:
    parameters:
      jdk:
        type: 'string'
        default: 'j21'
      docker-img:
        type: 'string'
        default: <<pipeline.parameters.docker-img>>
      topology:
        type: 'string'
        default: 'single'
      kafka-version:
        type: 'string'
        default: '3.9'
    environment:
      STARTER_MODE: <<parameters.topology>>
      DOCKER_IMAGE: <<parameters.docker-img>>
      KC: 'true'
      KAFKA_VERSION: <<parameters.kafka-version>>
    executor: <<parameters.jdk>>
    steps:
      - timeout
      - checkout
      - setup_docker
      - load_cache
      - run:
          name: Package
          command: mvn package -Ddistributed
      - run:
          name: Create Kafka Environment
          command: ./docker/startup_retry.sh
      - run:
          name: Integration Tests
          command: mvn integration-test -Ddistributed -Darango.topology=$STARTER_MODE
      - run:
          name: zip and retrieve test data
          command: ./docker/stop_db.sh
          when: on_fail
      - store_artifacts:
          path: result.tar.gz
      - report
      - store_cache

  test-ssl:
    parameters:
      docker-img:
        type: 'string'
        default: <<pipeline.parameters.docker-img>>
    environment:
      DOCKER_IMAGE: <<parameters.docker-img>>
      SSL: 'true'
      KC: 'true'
    executor: 'j21'
    steps:
      - timeout
      - checkout
      - setup_docker
      - load_cache
      - run:
          name: Package
          command: mvn package -Ddistributed
      - run:
          name: Create Kafka Environment
          command: ./docker/startup_retry.sh
      - run:
          name: Integration Tests
          command: mvn integration-test -Ddistributed -DSslTest=true -Dit.test=com.arangodb.kafka.SslIT
      - run:
          name: zip and retrieve test data
          command: ./docker/stop_db.sh
          when: on_fail
      - store_artifacts:
          path: result.tar.gz
      - report
      - store_cache

  test-resilience:
    parameters:
      docker-img:
        type: 'string'
        default: <<pipeline.parameters.docker-img>>
    environment:
      STARTER_MODE: 'cluster'
      DOCKER_IMAGE: <<parameters.docker-img>>
      TOXIPROXY_VERSION: 'v2.7.0'
    executor: 'j21'
    steps:
      - timeout
      - checkout
      - setup_docker
      - load_cache
      - run:
          name: Create Kafka Environment
          command: ./docker/startup_retry.sh
      - run:
          name: Start Toxiproxy
          command: ./bin/startProxy.sh
          background: true
      - run:
          name: Integration Tests
          command: mvn integration-test -DresilienceTests -Darango.topology=$STARTER_MODE -Dit.test=com.arangodb.kafka.resilience.**
      - run:
          name: zip and retrieve test data
          command: ./docker/stop_db.sh
          when: on_fail
      - store_artifacts:
          path: result.tar.gz
      - report
      - store_cache

  deploy:
    executor: 'j8'
    steps:
      - timeout
      - checkout
      - load_cache
      - config_gpg
      - deploy
      - store_cache

  release:
    executor: 'j8'
    steps:
      - timeout:
          duration: '15m'
      - checkout
      - load_cache
      - config_gpg
      - deploy
      - release
      - store_cache

workflows:

  test-standalone:
    jobs:
      - test-standalone:
          name: test-standalone

  test-distributed-jdk-versions:
    jobs:
      - test-distributed:
          name: test-distributed-<<matrix.jdk>>
          matrix:
            parameters:
              jdk:
                - 'j8'
                - 'j11'
                - 'j17'
                - 'j21'

  test-distributed-adb-versions:
    when:
      not: <<pipeline.parameters.docker-img>>
    jobs:
      - test-distributed:
          name: test-distributed-<<matrix.topology>>-<<matrix.docker-img>>
          matrix:
            parameters:
              docker-img:
                - 'docker.io/arangodb/arangodb:3.11'
                - 'docker.io/arangodb/arangodb:3.12'
              topology:
                - 'single'
                - 'cluster'

  test-distributed-adb-topologies:
    when: <<pipeline.parameters.docker-img>>
    jobs:
      - test-distributed:
          name: test-distributed-<<matrix.topology>>
          matrix:
            parameters:
              topology:
                - 'single'
                - 'cluster'

  test-distributed-kafka-versions:
    jobs:
      - test-distributed:
          name: test-distributed-<<matrix.kafka-version>>
          matrix:
            parameters:
              jdk:
                - 'j11'
              kafka-version:
                - '3.9'
                - '3.8'
                - '3.7'
                - '3.6'
                - '3.5'
                - '3.4'

  test-ssl:
    jobs:
      - test-ssl:
          name: test-ssl

  test-resilience:
    jobs:
      - test-resilience:
          name: test-resilience

  deploy:
    jobs:
      - deploy:
          context: java-release
          filters:
            tags:
              only: /^deploy.*/
            branches:
              ignore: /.*/

  release:
    jobs:
      - release:
          context: java-release
          filters:
            tags:
              only: /^release.*/
            branches:
              ignore: /.*/
